import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:flutter/material.dart';
import 'package:esaviourapp/models/planned_booking.dart';
import 'package:esaviourapp/services/planned_booking_service.dart';

class CreatePlannedBookingScreen extends StatefulWidget {
  const CreatePlannedBookingScreen({super.key});

  @override
  _CreatePlannedBookingScreenState createState() =>
      _CreatePlannedBookingScreenState();
}

class _CreatePlannedBookingScreenState
    extends State<CreatePlannedBookingScreen> {
  final _formKey = GlobalKey<FormState>();
  final _plannedBookingService = PlannedBookingService();

  final _associatedHospitalIdController = TextEditingController();
  final _associatedAmbulanceTypeIdController = TextEditingController();
  final _associatedAmbulanceIdController = TextEditingController();
  final _associatedUserIdController = TextEditingController();
  final _patientNameController = TextEditingController();
  final _contactNumberController = TextEditingController();
  final _addressController = TextEditingController();
  final _zipcodeController = TextEditingController();
  final _pickupAddressController = TextEditingController();
  DateTime? _pickupDateTime;
  String? _status;

  @override
  void dispose() {
    _associatedHospitalIdController.dispose();
    _associatedAmbulanceTypeIdController.dispose();
    _associatedAmbulanceIdController.dispose();
    _associatedUserIdController.dispose();
    _patientNameController.dispose();
    _contactNumberController.dispose();
    _addressController.dispose();
    _zipcodeController.dispose();
    _pickupAddressController.dispose();
    super.dispose();
  }

  Future<void> _submitForm() async {
    if (_formKey.currentState?.validate() ?? false) {
      final plannedBooking = PlannedBooking(
        id: '', // ID will be generated by Firestore
        associatedHospitalId: _associatedHospitalIdController.text,
        associatedAmbulanceTypeId: _associatedAmbulanceTypeIdController.text,
        associatedAmbulanceId: _associatedAmbulanceIdController.text.isEmpty
            ? null
            : _associatedAmbulanceIdController.text,
        associatedUserId: _associatedUserIdController.text.isEmpty
            ? null
            : _associatedUserIdController.text,
        patientName: _patientNameController.text,
        contactNumber: _contactNumberController.text,
        address: _addressController.text,
        zipcode: _zipcodeController.text,
        pickupAddress: _pickupAddressController.text.isEmpty
            ? null
            : _pickupAddressController.text,
        pickupDateTime: _pickupDateTime != null
            ? Timestamp.fromDate(_pickupDateTime!)
            : null,
        status: _status,
      );

      try {
        await _plannedBookingService.createPlannedBooking(plannedBooking);
        _showDialog('Success', 'Planned booking created successfully.');
      } catch (e) {
        _showDialog('Error', 'Failed to create planned booking: $e');
      }
    }
  }

  void _showDialog(String title, String message) {
    showDialog(
      context: context,
      builder: (BuildContext context) {
        return AlertDialog(
          title: Text(title),
          content: Text(message),
          actions: <Widget>[
            TextButton(
              child: const Text('OK'),
              onPressed: () {
                Navigator.of(context).pop();
                if (title == 'Success') {
                  Navigator.pop(context); // Close the form screen on success
                }
              },
            ),
          ],
        );
      },
    );
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('Create Planned Booking'),
      ),
      body: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Form(
          key: _formKey,
          child: ListView(
            children: [
              TextFormField(
                controller: _associatedHospitalIdController,
                decoration: const InputDecoration(labelText: 'Hospital ID'),
                validator: (value) {
                  if (value == null || value.isEmpty) {
                    return 'Please enter the hospital ID';
                  }
                  return null;
                },
              ),
              TextFormField(
                controller: _associatedAmbulanceTypeIdController,
                decoration:
                    const InputDecoration(labelText: 'Ambulance Type ID'),
                validator: (value) {
                  if (value == null || value.isEmpty) {
                    return 'Please enter the ambulance type ID';
                  }
                  return null;
                },
              ),
              TextFormField(
                controller: _associatedAmbulanceIdController,
                decoration:
                    const InputDecoration(labelText: 'Ambulance ID (optional)'),
              ),
              TextFormField(
                controller: _associatedUserIdController,
                decoration:
                    const InputDecoration(labelText: 'User ID (optional)'),
              ),
              TextFormField(
                controller: _patientNameController,
                decoration: const InputDecoration(labelText: 'Patient Name'),
                validator: (value) {
                  if (value == null || value.isEmpty) {
                    return 'Please enter the patient name';
                  }
                  return null;
                },
              ),
              TextFormField(
                controller: _contactNumberController,
                decoration: const InputDecoration(labelText: 'Contact Number'),
                validator: (value) {
                  if (value == null || value.isEmpty) {
                    return 'Please enter the contact number';
                  }
                  return null;
                },
              ),
              TextFormField(
                controller: _addressController,
                decoration: const InputDecoration(labelText: 'Address'),
                validator: (value) {
                  if (value == null || value.isEmpty) {
                    return 'Please enter the address';
                  }
                  return null;
                },
              ),
              TextFormField(
                controller: _zipcodeController,
                decoration: const InputDecoration(labelText: 'Zip Code'),
                validator: (value) {
                  if (value == null || value.isEmpty) {
                    return 'Please enter the zip code';
                  }
                  return null;
                },
              ),
              TextFormField(
                controller: _pickupAddressController,
                decoration: const InputDecoration(
                    labelText: 'Pickup Address (optional)'),
              ),
              GestureDetector(
                onTap: () async {
                  DateTime? pickedDateTime = await showDatePicker(
                    context: context,
                    initialDate: DateTime.now(),
                    firstDate: DateTime(2000),
                    lastDate: DateTime(2101),
                  );
                  if (pickedDateTime != null) {
                    TimeOfDay? pickedTime = await showTimePicker(
                      context: context,
                      initialTime: TimeOfDay.now(),
                    );
                    if (pickedTime != null) {
                      setState(() {
                        _pickupDateTime = DateTime(
                          pickedDateTime.year,
                          pickedDateTime.month,
                          pickedDateTime.day,
                          pickedTime.hour,
                          pickedTime.minute,
                        );
                      });
                    }
                  }
                },
                child: AbsorbPointer(
                  child: TextFormField(
                    decoration: InputDecoration(
                      labelText: 'Pickup Date & Time',
                      hintText: _pickupDateTime != null
                          ? '${_pickupDateTime!.toLocal()}'
                          : 'Select Date & Time',
                    ),
                    validator: (value) {
                      if (_pickupDateTime == null) {
                        return 'Please select a pickup date & time';
                      }
                      return null;
                    },
                  ),
                ),
              ),
              DropdownButtonFormField<String>(
                value: _status,
                items: const [
                  DropdownMenuItem(value: 'Pending', child: Text('Pending')),
                  DropdownMenuItem(
                      value: 'Confirmed', child: Text('Confirmed')),
                  DropdownMenuItem(
                      value: 'Cancelled', child: Text('Cancelled')),
                ],
                decoration: const InputDecoration(labelText: 'Status'),
                onChanged: (value) {
                  setState(() {
                    _status = value;
                  });
                },
                validator: (value) {
                  if (value == null) {
                    return 'Please select a status';
                  }
                  return null;
                },
              ),
              const SizedBox(height: 20),
              ElevatedButton(
                onPressed: _submitForm,
                child: const Text('Submit'),
              ),
            ],
          ),
        ),
      ),
    );
  }
}
